declare module "fastify" {
    interface Session {
        user?: {
            id: string;
        };
    }
}

export type Provider =
    | "1337x"
    | "gamestatus"
    | "pcgamestorrents"
    | "skidrow"
    | "steamcrackedgames"
    | "predb";

// Generated by https://quicktype.io
export interface AxiosGames {
    count: number;
    next: null | string;
    previous: null | string;
    results: Result[];
    user_platforms: boolean;
}

export interface Result {
    slug: string;
    name: string;
    playtime: number;
    platforms: Platform[];
    stores: Store[] | null;
    released: string;
    tba: boolean;
    background_image: string | null;
    rating: number;
    rating_top: number;
    ratings: Rating[];
    ratings_count: number;
    reviews_text_count: number;
    added: number;
    added_by_status: AddedByStatus | null;
    metacritic: number;
    suggestions_count: number;
    updated: string;
    id: number;
    score: null;
    clip: Clip | null;
    tags: Tag[];
    esrb_rating: EsrbRating | null;
    user_game: null;
    reviews_count: number;
    saturated_color: Color;
    dominant_color: Color;
    short_screenshots: ShortScreenshot[];
    parent_platforms: Platform[];
    genres: Genre[];
    community_rating?: number;
}

export interface AddedByStatus {
    yet?: number;
    owned: number;
    beaten?: number;
    toplay: number;
    dropped?: number;
    playing?: number;
}

export interface Clip {
    clip: string;
    clips: { [key: string]: string };
    video: string;
    preview: string;
}

export enum Color {
    The0F0F0F = "0f0f0f",
}

export interface EsrbRating {
    id: number;
    name: Name;
    slug: Slug;
    name_en: Name;
    name_ru: Name;
}

export enum Name {
    Everyone = "Everyone",
    Everyone10 = "Everyone 10+",
    Teen = "Teen",
}

export enum Slug {
    Everyone = "everyone",
    Everyone10Plus = "everyone-10-plus",
    Teen = "teen",
}

export interface Genre {
    id: number;
    name: string;
    slug: string;
}

export interface Platform {
    platform: Genre;
}

export interface Rating {
    id: number;
    title: Title;
    count: number;
    percent: number;
}

export enum Title {
    Exceptional = "exceptional",
    Meh = "meh",
    Recommended = "recommended",
    Skip = "skip",
}

export interface ShortScreenshot {
    id: number;
    image: string;
}

export interface Store {
    store: Genre;
}

export interface Tag {
    id: number;
    name: string;
    slug: string;
    language: Language;
    games_count: number;
    image_background: string;
}

export enum Language {
    Eng = "eng",
    Rus = "rus",
}

// Generated by https://quicktype.io
export interface GameStatusSearch {
    id: string;
    slug: string;
    title: string;
    is_AAA: boolean;
    protections: string;
    hacked_groups: string;
    release_date: string;
    crack_date: string;
    short_image: string;
    full_image: string;
    teaser_link: string;
    mata_score: number | null;
    user_score: number | null;
    readable_status: string;
    is_offline_act: boolean;
}

declare namespace fuzzysort {
    interface Result {
        /**
         * Higher is better
         *
         * 0 is a perfect match; -1000 is a bad match
         */
        readonly score: number;

        /** Your original target string */
        readonly target: string;

        /** Indexes of the matching target characters */
        readonly indexes: number[];
    }
    interface Results extends ReadonlyArray<Result> {
        /** Total matches before limit */
        readonly total: number;
    }

    interface KeyResult<T> extends Result {
        /** Your original object */
        readonly obj: T;
    }
    interface KeysResult<T> extends ReadonlyArray<Result> {
        /**
         * Higher is better
         *
         * 0 is a perfect match; -1000 is a bad match
         */
        readonly score: number;

        /** Your original object */
        readonly obj: T;
    }
    interface KeyResults<T> extends ReadonlyArray<KeyResult<T>> {
        /** Total matches before limit */
        readonly total: number;
    }
    interface KeysResults<T> extends ReadonlyArray<KeysResult<T>> {
        /** Total matches before limit */
        readonly total: number;
    }

    interface Prepared {
        /** Your original target string */
        readonly target: string;
    }

    interface CancelablePromise<T> extends Promise<T> {
        cancel(): void;
    }

    interface Options {
        /** Don't return matches worse than this (higher is faster) */
        threshold?: number;

        /** Don't return more results than this (lower is faster) */
        limit?: number;

        /** Allwos a snigle transpoes (false is faster) */
        allowTypo?: boolean;
    }
    interface KeyOptions extends Options {
        key: string | ReadonlyArray<string>;
    }
    interface KeysOptions<T> extends Options {
        keys: ReadonlyArray<string | ReadonlyArray<string>>;
        scoreFn?: (keysResult: ReadonlyArray<KeyResult<T>>) => number;
    }

    interface HighlightCallback<T> {
        (match: string, index: number): T;
    }

    interface Fuzzysort {
        /**
         * Help the algorithm go fast by providing prepared targets instead of raw strings
         */
        prepare(target: string): Prepared;

        highlight(
            result?: Result,
            highlightOpen?: string,
            highlightClose?: string
        ): string | null;
        highlight<T>(result: Result, callback: HighlightCallback<T>): (string | T)[] | null;

        single(search: string, target: string | Prepared): Result | null;
        go(
            search: string,
            targets: ReadonlyArray<string | Prepared | undefined>,
            options?: Options
        ): Results;
        go<T>(
            search: string,
            targets: ReadonlyArray<T | undefined>,
            options: KeyOptions
        ): KeyResults<T>;
        go<T>(
            search: string,
            targets: ReadonlyArray<T | undefined>,
            options: KeysOptions<T>
        ): KeysResults<T>;
        goAsync(
            search: string,
            targets: ReadonlyArray<string | Prepared | undefined>,
            options?: Options
        ): CancelablePromise<Results>;
        goAsync<T>(
            search: string,
            targets: ReadonlyArray<T | undefined>,
            options: KeyOptions
        ): CancelablePromise<KeyResults<T>>;
        goAsync<T>(
            search: string,
            targets: ReadonlyArray<T | undefined>,
            options: KeysOptions<T>
        ): CancelablePromise<KeysResults<T>>;

        /** Returns a new instance of fuzzysort, which you can give different default options to */
        "new"(options?: Options): Fuzzysort;
    }
}

declare module "fuzzysort" {
    const fuzzysort: Fuzzysort.Fuzzysort;
    export = fuzzysort;
}

// Generated by https://quicktype.io

export interface AxiosSteamCrackedGamesLast {
    success: boolean;
    games: GameSteamCracked[];
}

export interface GameSteamCracked {
    app_id: number;
    name: string;
    slug: string;
    crack_status: number;
    header_image: string;
    required_age: number | string;
    detailed_description: string;
    short_description: string;
    website: null | string;
    release_date: string;
    background: string;
    added_date: number;
    warez_group_1: string;
    warez_group_2: number | string;
    warez_group_3: number;
    warez_group_4: number;
    cracked_date_1: string;
    cracked_date_2: string;
    cracked_date_3: string;
    cracked_date_4: string;
    is_denuvo: number;
    highlight: number;
    last_change_date: number;
    last_change_by: string;
    is_steam: boolean;
    drm_protection: string;
    online_fix: number;
    online_only: number;
    aaa: number;
    repacks: string;
    _id: number;
}

// Generated by https://quicktype.io

export interface AxiosGameStatusLast {
    list_crack_games: ListCrackGame[];
    year_cracked_games: number;
    month_cracked_games: number;
    ref_game: any[];
}

export interface ListCrackGame {
    id: string;
    slug: string;
    title: string;
    is_AAA: boolean;
    protections: string;
    hacked_groups: string;
    release_date: string;
    crack_date: string;
    short_image: string;
    full_image: string;
    teaser_link: string;
    mata_score: number | null;
    user_score: number | null;
    readable_status: string;
    is_offline_act: boolean;
}

// Generated by https://quicktype.io
export interface AxiosPredb {
    status: string;
    message: string;
    data: Data;
}

export interface Data {
    rowCount: number;
    rows: Row[];
    offset: number;
    reqCount: number;
    total: number;
    time: number;
}

export interface Row {
    id: number;
    name: string;
    team: string;
    cat: string;
    genre: string;
    url: string;
    size: number;
    files: number;
    preAt: number;
    nuke: Nuke | null;
}

export interface Nuke {
    id: number;
    typeId: number;
    type: string;
    preId: number;
    reason: string;
    net: string;
    nukeAt: number;
}

// Generated by https://quicktype.io
export interface AxiosDenuvoUpdates {
    success: number;
    pagesize: string;
    total_count: number;
    start: string;
    results_html: string;
    rgFacets: string;
    bFiltering: boolean;
    apptypeoverride: string;
}
